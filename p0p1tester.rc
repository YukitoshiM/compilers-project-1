/*
function : void check_auto(){
	auto i = 5;
	static auto b = true;
	const auto f = 11.1;
}*/
/*
int myX;
int x;
function : void check_0(){
	int x;
	int i = 5 + ::x;
}*/
/*
function : void check_1(){
	int i;
	float f;
	bool b;
	
	//This checks "+" "-" "*" "/" have numeric operands for both side
	i = i + i;
	f = f - f;
	i = i * f; //fails since float is not assignable to int
	b = f / b;  //this supposed to fail since lOp is boolean
	1+1;
	1+true; //fails since rOp is boolean
	
	//This checks "%" have int operands for both side
	i = i % i;
	f = i % i;
	i = i % f; //fails since lOp float
	f = b % b; //fails since Ops are boolean
	
	//This checks "<" ">" "<=" ">=" have both numeric operands for both side
	i < i;
	i > f;
	f >= f;
	f <= i;
	b < b; //fails since Ops are boolean
	b > i; //fails since Ops are not comparable
	f <= b; //fails since Ops are not comparable
	
	//This checks "==" "!=" have both numeric or boolean operands for both side
	i == i;
	i != f;
	f == f;
	f != i;
	b == b;
	b != i; //fails since Ops are not comparable
	f == b; //fails since Ops are not comparable
	
	//This checks "&&" "||" "!" have both boolean operands for both side
	i && i; //fails since both Ops are not boolean
	i || f; //fails since both Ops are not boolean
	f && f; //fails since both Ops are not boolean
	f || i; //fails since both Ops are not boolean
	b = b && b;
	b || i; //fails since both Ops are not boolean
	f && b; //fails since both Ops are not boolean
	
	!i; //fails since Op is not boolean
	!f; //fails since Op is not boolean
	!b;
	
	//This checks "&" "^" "|" have both boolean operands for both side
	i & i; 
	i | f; //fails since both Ops are not  int
	f ^ f; //fails since both Ops are not  int
	f | i; //fails since both Ops are not  int
	b & b; //fails since both Ops are not  int
	b ^ i; //fails since both Ops are not  int
	f & b; //fails since both Ops are not  int
}*/

/*function : void check_2(){
  int i;
  float f;
  bool b;
  
  //checks simple cases of unary ops
  i++;
  --f;
  b++; //fails since boolean cannot increment or decrement 
  1++; //fails since constant is not modifiable
  f =  i++ + --f; 
}*/

/*function : void check_3ab(){
  int i;
  float f;
  bool b;
  
  //3a
  1 = 3 = 4=5;
  
  //3b
  //checks lOp is modifiable
  b = b;
  1 = b; //fails since lOp is not modifiable
  1 = i; //fails since lOp is not modifiable

  //checks lOp is assignable
  i = 1;
  i = 1.1; //fails since lOp is not assignable
  i = true; //fails since lOp is not assignable
  i = i;
  i = f; //fails since lOp is not assignable
  i = b; //fails since lOp is not assignable
  f = 1;
  f = 1.1;
  f = false; //fails since lOp is not assignable
  f = i;
  f = f;
  f = b; //fails since lOp is not assignable
  b = true;
  b = 1; //fails since lOp is not assignable
  b = 1.1; //fails since lOp is not assignable
  b = i; //fails since lOp is not assignable
  b = f; //fails since lOp is not assignable
  b = b;
}*/

function : void check_3c(){
  int i;
  float f;
  bool b;
  

 return;
}

function : int check_6c_a() {   //with return statement should work //check
  int i = 5;
  float f;
  bool b;
  return i;
}

function : int check_6c_b() {   //without return statement should throw error //check
  int i = 5;
  float f;
  bool b;
}

function : int check_6c_c() {   //without return statement in outer scope::should throw error //check
  int i = 5;
  float f;
  bool b;
  if(true) {
     return i;
  }
  
}



function : void main() {
	return;
}